openapi: 3.0.0
info:
  title: Vehicle API
  version: 1.0.0
  description: API for managing vehicles
servers:
  - url: http://localhost:3000/v1
paths:
  /users/{userId}/vehicles:
    post:
      summary: Add new user vehicle
      description: This route is for creating a new vehicle for a user.
      parameters:
        - name: userId
          in: path
          required: true
          description: Mandatory user ID.
          schema:
            type: string
            format: uuid
            example: "1e03a16e-8275-4285-92e4-c80c87085399"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/vehicle.yaml#/components/schemas/Vehicle'
      responses:
        '200':
          description: Successful vehicle creation
          content:
            application/json:
              schema:
                $ref: './schemas/vehicle.yaml#/components/schemas/Vehicle'
        '4XX':
          $ref: './common/responses.yaml#/responses/BadRequest'

    get:
      summary: Get user vehicles
      description: This route retrieves all vehicles for a user.
      parameters:
        - name: userId
          in: path
          required: true
          description: Mandatory user ID.
          schema:
            type: string
            format: uuid
            example: "1e03a16e-8275-4285-92e4-c80c87085399"
      responses:
        '200':
          description: Successful retrieval of user vehicles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/vehicle.yaml#/components/schemas/Vehicle'
        '4XX':
          $ref: './common/responses.yaml#/responses/BadRequest'

  /users/{userId}/vehicles/{vehicleId}:
    get:
      summary: Get specific user vehicle
      description: This route retrieves a specific vehicle for a user.
      parameters:
        - name: userId
          in: path
          required: true
          description: Mandatory user ID.
          schema:
            type: string
            format: uuid
            example: "1e03a16e-8275-4285-92e4-c80c87085399"
        - name: vehicleId
          in: path
          required: true
          description: Mandatory vehicle ID.
          schema:
            type: string
            format: uuid
            example: "7e03a16e-8275-4285-92e4-c80c87085399"
      responses:
        '200':
          description: Successful retrieval of vehicle
          content:
            application/json:
              schema:
                $ref: './schemas/vehicle.yaml#/components/schemas/Vehicle'
        '4XX':
          $ref: './common/responses.yaml#/responses/BadRequest'
        '404':
          $ref: './common/responses.yaml#/responses/NotFound'

    patch:
      summary: Update user vehicle
      description: This route updates a specific vehicle for a user.
      parameters:
        - name: userId
          in: path
          required: true
          description: Mandatory user ID.
          schema:
            type: string
            format: uuid
            example: "1e03a16e-8275-4285-92e4-c80c87085399"
        - name: vehicleId
          in: path
          required: true
          description: Mandatory vehicle ID.
          schema:
            type: string
            format: uuid
            example: "7e03a16e-8275-4285-92e4-c80c87085399"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/vehicle.yaml#/components/schemas/Vehicle'
      responses:
        '200':
          description: Successful vehicle update
          content:
            application/json:
              schema:
                $ref: './schemas/vehicle.yaml#/components/schemas/Vehicle'
        '4XX':
          $ref: './common/responses.yaml#/responses/BadRequest'
        '404':
          $ref: './common/responses.yaml#/responses/NotFound'

    delete:
      summary: Delete user vehicle
      description: This route deletes a specific vehicle for a user.
      parameters:
        - name: userId
          in: path
          required: true
          description: Mandatory user ID.
          schema:
            type: string
            format: uuid
            example: "1e03a16e-8275-4285-92e4-c80c87085399"
        - name: vehicleId
          in: path
          required: true
          description: Mandatory vehicle ID.
          schema:
            type: string
            format: uuid
            example: "7e03a16e-8275-4285-92e4-c80c87085399"
      responses:
        '200':
          description: Successful vehicle deletion
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '4XX':
          $ref: './common/responses.yaml#/responses/BadRequest'
        '404':
          $ref: './common/responses.yaml#/responses/NotFound'
